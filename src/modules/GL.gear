native {
    #include <GL/glut.h>
    #include <GL/gl.h>
    
    #include "GL.h"
    #include "../shell.h"
    
    static bool bGLIsUsed = false;
    v8::Local<v8::Value> pGlutRedrawFunc;
    v8::Local<v8::Value> pGlutKeyPressFunc;
    v8::Local<v8::Value> pGlutKeyUpFunc;
    v8::Local<v8::Value> pGlutMouseMoveFunc;
    v8::Local<v8::Value> pGlutResizeFunc;
    
    void GLProxyDisplayFunc() {
        V8FuncCall0(v8::Object::New(), pGlutRedrawFunc);
    }
    void GLProxyKeyboardFunc(unsigned char key, int x, int y) {
        V8FuncCall(v8::Object::New(), pGlutKeyPressFunc, v8::Integer::New(key), v8::Integer::New(x), v8::Integer::New(y));
    }
    void GLProxyKeyboardUpFunc(unsigned char key, int x, int y) {
        V8FuncCall(v8::Object::New(), pGlutKeyUpFunc, v8::Integer::New(key), v8::Integer::New(x), v8::Integer::New(y));
    }
    void GLProxyMotionFunc(int x, int y) {
        V8FuncCall(v8::Object::New(), pGlutMouseMoveFunc, v8::Integer::New(x), v8::Integer::New(y));
    }
    void GLProxyReshapeFunc(int w, int h) {
        V8FuncCall(v8::Object::New(), pGlutResizeFunc, v8::Integer::New(w), v8::Integer::New(h));
    }
    
    #define CLIP(x, a, b) ((x) < (a) ? (a) : ((x) > (b) ? (a) : (x)))
}

namespace GL {
    function initWindow(String name, Integer w, Integer h) {
        if(bGLIsUsed)
            V8Throw("GL is already being used");
        int argc = 0;
        glutInit(&argc, 0);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
        glutInitWindowSize(w, h);
        glutCreateWindow(name);
    }
    
    function mainLoop(object (function redraw, function keyPress, function keyUp, function mouseMove, function resize) handlers) {
        pGlutRedrawFunc = handlers.redraw;
        glutDisplayFunc(GLProxyDisplayFunc);
        
        pGlutKeyPressFunc = handlers.keyPress;
        glutKeyboardFunc(GLProxyKeyboardFunc);
        
        pGlutKeyUpFunc = handlers.keyUp;
        glutKeyboardUpFunc(GLProxyKeyboardUpFunc);
        
        pGlutMouseMoveFunc = handlers.mouseMove;
        glutMotionFunc(GLProxyMotionFunc);
        glutPassiveMotionFunc(GLProxyMotionFunc);
        
        pGlutResizeFunc = handlers.resize;
        glutReshapeFunc(GLProxyReshapeFunc);
        
        glutMainLoop();
    }
    
    function clear(Number r, Number g, Number b, Number a) {
        glClearColor(r, g, b, a);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    }
    
    function clear(object (Number r, Number g, Number b, Number a) color) {
        glClearColor(color.r, color.g, color.b, color.a);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    }
    
    function warpPointer(Integer x, Integer y) {
        glutWarpPointer(x, y);
    }
    
    function disableCursor() {
        glutSetCursor(GLUT_CURSOR_NONE);
    }
    
    function enableDepthTest() {
        glEnable(GL_DEPTH_TEST);
    }
    
    function enableLighting() {
        glEnable(GL_LIGHTING);
        glEnable(GL_LIGHT0);
    }
    
    function disableLighting() {
        glDisable(GL_LIGHTING);
        glDisable(GL_LIGHT0);
    }
    
    function flush() {
        glFlush();
        glutSwapBuffers();
    }
    
    function needsRedraw() {
        glutPostRedisplay();
    }
    
    function bitmapCharacter(String char) {
        if(char.length == 1)
            glutBitmapCharacter(GLUT_BITMAP_9_BY_15, char[0]);
    }
    
    function loadIdentity() {
        glLoadIdentity();
    }
    
    function viewport(Integer x1, Integer y1, Integer x2, Integer y2) {
        glViewport(x1, y1, x2, y2);
    }
    
    function matrixModeProjection() {
        glMatrixMode(GL_PROJECTION);
    }
    
    function matrixModeModelView() {
        glMatrixMode(GL_MODELVIEW);
    }
    
    function pushMatrix() {
        glPushMatrix();
    }
    
    function popMatrix() {
        glPopMatrix();
    }
    
    function perspective(Number fovy, Number aspect, Number zNear, Number zFar) {
        gluPerspective(fovy, aspect, zNear, zFar);
    }
    
    function ortho2D(Number left, Number right, Number bottom, Number top) {
        gluOrtho2D(left, right, bottom, top);
    }
    
    function lookAt(Number eyeX, Number eyeY, Number eyeZ, Number centerX, Number centerY, Number centerZ, Number upX, Number upY, Number upZ) {
        gluLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
    }
    
    function translate(Number x, Number y, Number z) {
        glTranslated(x, y, z);
    }
    
    function scale(Number x, Number y, Number z) {
        glScaled(x, y, z);
    }
    
    function rotate(Number angle, Number x, Number y, Number z) {
        glRotated(angle, x, y, z);
    }
    
    function color(Number r, Number g, Number b) {
        glColor3d(r, g, b);
    }
    
    function color(Number r, Number g, Number b, Number a) {
        glColor4d(r, g, b, a);
    }
    
    function beginPolygon() {
        glBegin(GL_POLYGON);
    }
    
    function beginTriangles() {
        glBegin(GL_TRIANGLES);
    }
    
    function beginTriangleStrip() {
        glBegin(GL_TRIANGLE_STRIP);
    }
    
    function end() {
        glEnd();
    }
    
    function vertex(Number x, Number y, Number z) {
        glVertex3d(x, y, z);
    }
    
    function normal(Number x, Number y, Number z) {
        glNormal3d(x, y, z);
    }
    
    function rasterPos(Number x, Number y) {
        glRasterPos2d(x, y);
    }
}
