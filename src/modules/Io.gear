header {
    #include <string>
    #include <fstream>
    #include <streambuf>
    #include <stdio.h>
    
    using namespace std;
    
    #define fread_num(x, fp, dw) do {x i;fread(&i, sizeof(x), 1, fp);dw;} while(0)
}

namespace Io {
    class File {
        var f = 0;
        
        function File(path) {
            this["f"] = fopen(path.to<String>(), "rw+");
        }
        
        function File(path, mode) {
            this["f"] = fopen(path.to<String>(), mode.to<String>());
        }
        
        function seekAbs(pos) {
            fseek(this["f"], pos.to<int>(), SEEK_SET);
        }
        
        function seekRel(pos) {
            fseek(this["f"], pos.to<int>(), SEEK_CUR);
        }
        
        function tell() {
            return Integer(ftell(this["f"]));
        }
        
        function readInt(len) {
            if(len == 1)
                fread_num(uint8_t, this["f"], return Integer(i));
            if(len == 2)
                fread_num(uint16_t, this["f"], return Integer(i));
            if(len == 4)
                fread_num(uint32_t, this["f"], return Integer(i));
            if(len == 8)
                fread_num(uint64_t, this["f"], return Integer(i));
        }
        
        function readFloat() {
            fread_num(float, this["f"], return Number(i));
        }
        
        function readFloat(prec) {
            if(prec == 1)
                fread_num(float, this["f"], return Number(i));
            if(prec == 2)
                fread_num(double, this["f"], return Number(i));
            if(prec == 4)
                fread_num(long double, this["f"], return Number(i));
        }
    }
    
    function readFileContents(path) {
        ifstream file(path.to<String>());
        string str;
        
        file.seekg(0, std::ios::end);   
        str.reserve(file.tellg());
        file.seekg(0, std::ios::beg);
        
        str.assign((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        
        return String(str.c_str());
    }
    
    function readFileContentsBinary(path) {
        ifstream file(path.to<String>());
        
        file.seekg(0, std::ios::end);   
        streamsize len = file.tellg();
        file.seekg(0, std::ios::beg);
        
        char *ptr = new char [len];
        file.read(ptr, len);
        
        v8::Handle<v8::Object> buffer = v8::Object::New();
        buffer->SetIndexedPropertiesToExternalArrayData(ptr, v8::kExternalUnsignedByteArray, len);
        
        return buffer;
    }
    
    function writeFileContents(path, contents) {
        ofstream file(path.to<String>());
        file.write(contents.to<String>(), contents.length());
    }
}
