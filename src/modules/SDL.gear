license {
    /*
     * Copyright (c) 2011 Eduard Burtescu
     *
     * Permission to use, copy, modify, and distribute this software for any
     * purpose with or without fee is hereby granted, provided that the above
     * copyright notice and this permission notice appear in all copies.
     *
     * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
     * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
     * MERCHANTABILITY AND FITRTLSS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
     * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
     * ACTION OF CONTRACT, RTLGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
     * OR IN CONRTLCTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     */
}

top {
    #include <SDL/SDL.h>
    
    static bool bSDLIsUsed = false;
    
    #define CLIP(x, a, b) ((x) < (a) ? (a) : ((x) > (b) ? (a) : (x)))
    
    Uint32 getPixel(SDL_Surface *surface, Uint32 x, Uint32 y) {
        int bpp = surface->format->BytesPerPixel;
        /* Here p is the address to the pixel we want to retrieve */
        Uint8 *p = (Uint8 *)surface->pixels + y * surface->pitch + x * bpp;
        
        switch(bpp) {
            case 1:
                return *p;
                break;
                
            case 2:
                return *(Uint16 *)p;
                break;
                
            case 3:
                if(SDL_BYTEORDER == SDL_BIG_ENDIAN)
                    return p[0] << 16 | p[1] << 8 | p[2];
                else
                    return p[0] | p[1] << 8 | p[2] << 16;
                break;
                
            case 4:
                return *(Uint32 *)p;
                break;
                
            default:
                return 0;       /* shouldn't happen, but avoids warnings */
        }
    }
    
    void setPixel(SDL_Surface *surface, Uint32 x, Uint32 y, Uint32 pixel) {
        int bpp = surface->format->BytesPerPixel;
        /* Here p is the address to the pixel we want to set */
        Uint8 *p = (Uint8 *)surface->pixels + y * surface->pitch + x * bpp;
        
        switch(bpp) {
            case 1:
                *p = pixel;
                break;
                
            case 2:
                *(Uint16 *)p = pixel;
                break;
                
            case 3:
                if(SDL_BYTEORDER == SDL_BIG_ENDIAN) {
                    p[0] = (pixel >> 16) & 0xff;
                    p[1] = (pixel >> 8) & 0xff;
                    p[2] = pixel & 0xff;
                } else {
                    p[0] = pixel & 0xff;
                    p[1] = (pixel >> 8) & 0xff;
                    p[2] = (pixel >> 16) & 0xff;
                }
                break;
                
            case 4:
                *(Uint32 *)p = pixel;
                break;
        }
    }
}

module SDL {
    class Window {
        var surface = 0;
        
        function Window(name, w, h) {
            if(bSDLIsUsed)
                return Throw(Error("SDL is already being used"));
            SDL_Init(SDL_INIT_EVERYTHING);
            this["surface"] = SDL_SetVideoMode(w.to<int>(), h.to<int>(), 32, SDL_HWSURFACE | SDL_DOUBLEBUF);
            SDL_WM_SetCaption(name.to<String>(), NULL);
            bSDLIsUsed = true;
        }
    
        function color(htmlColor) {
            Uint8 r = 0, g = 0, b = 0;
            
            if(htmlColor.length() == 7) {
                Uint32 color = strtoul(htmlColor.to<String>()+1, 0, 16);
                r = (color >> 16) & 0xff;
                g = (color >> 8) & 0xff;
                b = color & 0xff;
            }
            else if(htmlColor.length() == 4) {
                Uint32 color = strtoul(htmlColor.to<String>()+1, 0, 16);
                r = (color >> 8) & 0xf;
                g = (color >> 4) & 0xf;
                b = color & 0xf;
                r = r | (r << 4);
                g = g | (g << 4);
                b = b | (b << 4);
            }
            return Integer(SDL_MapRGB(this["surface"].to<SDL_Surface*>()->format, r, g, b));
        }
        
        function color(r, g, b) {
            return Integer(SDL_MapRGB(this["surface"].to<SDL_Surface*>()->format, CLIP(r.to<int>(), 0, 255), CLIP(g.to<int>(), 0, 255), CLIP(b.to<int>(), 0, 255)));
        }
        
        function pixel(x, y, color) {
            setPixel(this["surface"], CLIP(x.to<int>(), 0, this["surface"].to<SDL_Surface*>()->w - 1), CLIP(y.to<int>(), 0, this["surface"].to<SDL_Surface*>()->h - 1), color.to<int>());
            return this;
        }
        
        function pixel(x, y) {
            return Integer(getPixel(this["surface"], CLIP(x.to<int>(), 0, this["surface"].to<SDL_Surface*>()->w - 1), CLIP(y.to<int>(), 0, this["surface"].to<SDL_Surface*>()->h - 1)));
        }
        
        function update(x, y, width, height) {
            SDL_UpdateRect(this["surface"], CLIP(x.to<int>(), 0, this["surface"].to<SDL_Surface*>()->w - 1), CLIP(y.to<int>(), 0, this["surface"].to<SDL_Surface*>()->h - 1),
                        CLIP(x.to<int>() + width.to<int>(), 0, this["surface"].to<SDL_Surface*>()->w - 1) - x.to<int>(), CLIP(y.to<int>() + height.to<int>(), 0, this["surface"].to<SDL_Surface*>()->h - 1) - y.to<int>());
            return this;
        }
        
        function update() {
            SDL_UpdateRect(this["surface"], 0, 0, 0, 0);
            return this;
        }
        
        function checkEvent(handlers) {
            SDL_Event event;
            if(!SDL_PollEvent(&event))
                return;
            switch(event.type) {
                case SDL_QUIT:
                    handlers["quit"]();
                    break;
            }
        }
    
        function awaitEvent(handlers) {
            SDL_Event event;
            if(SDL_WaitEvent(&event) < 0)
                return;
            switch(event.type) {
                case SDL_QUIT:
                    handlers["quit"]();
                    break;
            }
        }
    }
    
    class Image {
        var surface = 0;
        
        function Image(path) {
            this["surface"] = SDL_LoadBMP(path.to<String>());
        }
    }
}
