license {
    /*
     * Copyright (c) 2011 Sanjeev B.A.
     *
     * Permission to use, copy, modify, and distribute this software for any
     * purpose with or without fee is hereby granted, provided that the above
     * copyright notice and this permission notice appear in all copies.
     *
     * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
     * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
     * MERCHANTABILITY AND FITRTLSS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
     * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
     * ACTION OF CONTRACT, RTLGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
     * OR IN CONRTLCTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     */
}

top {
    #include <Elementary.h>

    void close(void *data, Evas_Object *obj, void *event) {
        elm_exit();
    }
    
    void elmOnClick(void *_this, Evas_Object *eo, void *event_info) {
        (*reinterpret_cast<Value*>(_this))["_onClick"]();
    }
}

module Elm {

    function mainLoop() {
        ecore_main_loop_begin();
    }

    postSetup {
        eina_init();
        ecore_init();
        elm_init(0, NULL);
    }


    class EvasObject {

        getter x() {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            return Number(x);
        }

        setter x(_x) {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            evas_object_move(this["eo"], _x, y);
        }

        getter y() {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            return Number(y);
        }

        setter y(_y) {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            evas_object_move(this["eo"], x, _y);
        }

        getter height() {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            return Number(height);
        }

        setter height(_height) {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            evas_object_resize(this["eo"], width, _height);
        }

        getter width() {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            return Number(width);
        }

        setter width(_width) {
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(this["eo"], &x, &y, &width, &height);
            evas_object_resize(this["eo"], _width, height);
        }

        getter label() {
            return String(elm_object_text_get(this["eo"]));
        }

        setter label(label) {
            elm_object_text_set(this["eo"], label.to<String>());
        }

        getter text() {
            return String(elm_object_text_get(this["eo"]));
        }

        setter text(text) {
            elm_object_text_set(this["eo"], text.to<String>());
        }

        getter scale() {
            return Number(elm_object_scale_get(this["eo"]));
        }

        setter scale(scale) {
            elm_object_scale_set(this["eo"], scale);
        }

        getter xalign() {
            double x, y;
            evas_object_size_hint_align_get(this["eo"], &x, &y);
            return Number(x);
        }

        setter xalign(_x) {
            double x, y;
            evas_object_size_hint_align_get(this["eo"], &x, &y);
            evas_object_size_hint_align_set(this["eo"], _x, y);
        }

        getter yalign() {
            double x, y;
            evas_object_size_hint_align_get(this["eo"], &x, &y);
            return Number(y);
        }

        setter yalign(_y) {
            double x, y;
            evas_object_size_hint_align_get(this["eo"], &x, &y);
            evas_object_size_hint_align_set(this["eo"], x, _y);
        }

        getter style() {
            return String(elm_object_style_get(this["eo"]));
        }

        setter style(style) {
            elm_object_style_set(this["eo"], style.to<String>());
        }

        getter visible() {
             return Value(evas_object_visible_get(this["eo"]));
        }

        setter visible(visible) {
            if(visible)
                evas_object_show(this["eo"]);
            else
                evas_object_hide(this["eo"]);
        }

    }

    class Win : EvasObject {

        function Win(parent, title) {
            this["eo"] = elm_win_add(NULL, title.to<String>(), ELM_WIN_BASIC);
            evas_object_smart_callback_add(this["eo"], "delete,request", close, NULL);
            evas_object_show(this["eo"]);
        }

        function resize(width, height) {
            evas_object_resize(this["eo"], width, height);
        }

        getter title() {
            return String(elm_win_title_get(this["eo"]));
        }

        setter title(title) {
            elm_win_title_set(this["eo"], title.to<String>());
        }

        getter autodel() {
            bool autodel = elm_win_autodel_get(this["eo"]);
            return Value(autodel);
        }

        setter autodel(autodel) {
            elm_win_autodel_set(this["eo"], autodel);
        }

    }

    class Background : EvasObject {

        function Background(parent, file, group) {
            this["eo"] = elm_bg_add(parent["eo"]);
            elm_bg_file_set(this["eo"], file.to<String>(), group.to<String>());
            evas_object_size_hint_weight_set(this["eo"], EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
            elm_win_resize_object_add(parent["eo"], this["eo"]);
            evas_object_show(this["eo"]);
        }

        getter red() {
            int r;
            elm_bg_color_get(this["eo"], &r, NULL, NULL);
            return Integer(r);
        }

        setter red(_r) {
            int r, g, b;
            elm_bg_color_get(this["eo"], &r, &g, &b);
            elm_bg_color_set(this["eo"], _r, g, b);
        }

        getter green() {
            int g;
            elm_bg_color_get(this["eo"], NULL, NULL, &g);
            return Integer(g);
        }

        setter green(_g) {
            int r, g, b;
            elm_bg_color_get(this["eo"], &r, &g, &b);
            elm_bg_color_set(this["eo"], r, _g, b);
        }

        getter blue() {
            int b;
            elm_bg_color_get(this["eo"], NULL, &b, NULL);
            return Integer(b);
        }

        setter blue(_b) {
            int r, g, b;
            elm_bg_color_get(this["eo"], &r, &g, &b);
            elm_bg_color_set(this["eo"], r, g, _b);
        }

        getter file() {
            const char *file, *group;
            elm_bg_file_get(this["eo"], &file, &group);
            return String(file);
        }

        setter file(file) {
            elm_bg_file_set(this["eo"], file.to<String>(), NULL);
        }
        
        getter group() {
            const char *file, *group;
            elm_bg_file_get(this["eo"], &file, &group);
            return String(group);
        }
        
        setter group(group) {
            elm_bg_file_set(this["eo"], NULL, group.to<String>());
        }
        
        getter option() {
            int option;
            option = elm_bg_option_get(this["eo"]);
            return Integer(option); 
        }
        
        setter option(_option) {
            Elm_Bg_Option opt = (Elm_Bg_Option)(_option.to<int>());
            elm_bg_option_set(this["eo"], opt);
        }
    }

    class Box : EvasObject {
        function Box(parent) {
            this["eo"] = elm_box_add(parent["eo"]);
            evas_object_size_hint_weight_set(this["eo"], EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
            evas_object_show(this["eo"]);
        }

        function add(child) {
            elm_box_pack_end(this["eo"], child["eo"]);
        }

        getter homogenous() {
            return Value(elm_box_homogeneous_get(this["eo"]));
        }

        setter homogenous(homogenous) {
            elm_box_homogeneous_set(this["eo"], homogenous);
        }

        getter horizontal() {
            return Value(elm_box_horizontal_get(this["eo"]));
        }

        setter horizontal(horizontal) {
            elm_box_horizontal_set(this["eo"], horizontal);
        }

    }

    class Icon : EvasObject {
        function Icon(parent, file) {
            this["eo"] = elm_icon_add(parent["eo"]);
            elm_icon_file_set(this["eo"], file.to<String>(), NULL);
            evas_object_show(this["eo"]);
        }

        getter file() {
            const char *file, *group;
            elm_icon_file_get(this["eo"], &file, &group);
            return String(file);
        }

        setter file(file) {
            elm_icon_file_set(this["eo"], file.to<String>(), NULL);
        }

    }

    class Button : EvasObject {

        function Button(parent) {
            this["eo"] = elm_button_add(parent["eo"]);
            evas_object_show(this["eo"]);
        }

        setter onClick(arg) {
            this["_onClick"] = arg;
            evas_object_smart_callback_add(this["eo"], "clicked", elmOnClick, new Value(this));
        }

        getter onClick() {
            return this["_onClick"];
        }

    }

    class Entry : EvasObject {

        function Entry(parent) {
            this["eo"] = elm_entry_add(parent["eo"]);
            evas_object_show(this["eo"]);
        }

        setter entry(text) {
            this["entry"] = text;
            elm_entry_entry_set(this["eo"], text);
        }

        getter entry() {
            const char *entry;
            entry = elm_entry_entry_get(this["eo"]);
            return String(entry);
        }

    }
}
