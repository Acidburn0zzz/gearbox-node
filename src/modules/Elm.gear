license {
    /*
     * Copyright (c) 2011 Sanjeev B.A.
     *
     * Permission to use, copy, modify, and distribute this software for any
     * purpose with or without fee is hereby granted, provided that the above
     * copyright notice and this permission notice appear in all copies.
     *
     * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
     * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
     * MERCHANTABILITY AND FITRTLSS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
     * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
     * ACTION OF CONTRACT, RTLGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
     * OR IN CONRTLCTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     */
}

top {
    #include <Elementary.h>

    void close(void *data, Evas_Object *obj, void *event) {
        elm_exit();
    }
    
    void elmOnClicked (void *data, Evas_Object *eo, void *event_info) {
        Value *ptr = reinterpret_cast<Value *>(data);
        (*ptr)["clicked"]();
    }
}

module elm {

    function mainLoop() {
        ecore_main_loop_begin();
    }

    postSetup {
        printf("Invoked init\n");
        eina_init();
        ecore_init();
        elm_init(0, NULL);
    }


    class Evas_Object {

        getter x() {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            return v8::Number::New(x);
        }

        setter x(arg) {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            x = arg.to<int>();
            evas_object_move(eo, x, y);
        }

        getter y() {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            return v8::Number::New(y);
        }

        setter y(arg) {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            y = arg.to<int>();
            evas_object_move(eo, x, y);
        }

        getter height() {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            return v8::Number::New(height);
        }

        setter height(arg) {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            height = arg;
            evas_object_resize(eo, width, height);
        }

        getter width() {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            return v8::Number::New(width);
        }

        setter width(arg) {
            var eo = this["eo"];
            Evas_Coord x, y, width, height;
            evas_object_geometry_get(eo, &x, &y, &width, &height);
            width = arg;
            evas_object_resize(eo, width, height);
        }

        getter label() {
            var eo = this["eo"];
            return v8::String::New(elm_object_text_get(eo));
        }

        setter label(arg) {
            var eo = this["eo"];
            printf("Setting labels %s\n", *(arg.to<String>()));
            elm_object_text_set(eo, arg.to<String>());
        }

        getter text() {
            var eo = this["eo"];
            return v8::String::New(elm_object_text_get(eo));
        }

        setter text(arg) {
            var eo = this["eo"];
            elm_object_text_set(eo, arg.to<String>());
        }

        getter scale() {
            var eo = this["eo"];
            return v8::Number::New(elm_object_scale_get(eo));
        }

        setter scale(arg) {
            var eo = this["eo"];
            elm_object_scale_set(eo, arg.to<int>());
        }

        getter xalign() {
            var eo = this["eo"];
            double x, y;
            evas_object_size_hint_align_get(eo, &x, &y);
            return v8::Number::New(x);
        }

        setter xalign(arg) {
            var eo = this["eo"];
            double x, y;
            evas_object_size_hint_align_get(eo, &x, &y);
            x=arg;
            evas_object_size_hint_align_set(eo, x, y);
        }

        getter yalign() {
            var eo = this["eo"];
            double x, y;
            evas_object_size_hint_align_get(eo, &x, &y);
            return v8::Number::New(y);
        }

        setter yalign(arg) {
            var eo = this["eo"];
            double x, y;
            evas_object_size_hint_align_get(eo, &x, &y);
            y=arg;
            evas_object_size_hint_align_set(eo, x, y);
        }

        getter style() {
            var eo = this["eo"];
            return v8::String::New(elm_object_style_get(eo));
        }

        setter style(arg) {
            var eo = this["eo"];
            elm_object_style_set(eo, arg.to<String>());
        }

        getter visible() {
            var eo = this["eo"];
             return v8::Boolean::New(evas_object_visible_get(eo));
        }

        setter visible(arg) {
            var eo = this["eo"];
            if (arg.to<bool>())
                evas_object_show(eo);
            else
                evas_object_hide(eo);
        }

    }

    class Win : Evas_Object {

        function Win(parent, title) {
            this["eo"] = elm_win_add(NULL, title.to<String>(), ELM_WIN_BASIC);
            evas_object_smart_callback_add(this["eo"], "delete,request", close, NULL);
            evas_object_show(this["eo"]);
        }

        function resize(width, height) {
            evas_object_resize(this["eo"], width.to<int>(), height.to<int>());
        }

        getter title() {
            const char *title = elm_win_title_get(this["eo"]);
            String str(title);
            return str;
        }

        setter title(arg) {
            elm_win_title_set(this["eo"], arg.to<String>());
        }

        getter autodel() {
            bool autodel = elm_win_autodel_get(this["eo"]);
            return v8::Boolean::New(autodel);
        }

        setter autodel(arg) {
            elm_win_autodel_set(this["eo"], arg.to<bool>());
        }

    }

    class Bg : Evas_Object {

        function Bg(parent, file, group) {
            this["eo"] = elm_bg_add(parent["eo"]);
            elm_bg_file_set(this["eo"], file.to<String>(), group.to<String>());
            evas_object_size_hint_weight_set(this["eo"], EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
            elm_win_resize_object_add(parent["eo"], this["eo"]);
            evas_object_show(this["eo"]);
        }

        getter red() {
            int val;
            elm_bg_color_get(this["eo"], &val, NULL, NULL);
            return v8::Integer::New(val);
        }

        setter red(arg) {
            int r, g, b;
            elm_bg_color_get(this["eo"], &r, &g, &b);
            r = arg.to<int>();
            elm_bg_color_set(this["eo"], r,g,b);
            evas_object_show(this["eo"]);
        }


        getter blue() {
            int val;
            elm_bg_color_get(this["eo"], NULL, &val, NULL);
            return v8::Integer::New(val);
        }

        setter blue(arg) {
            int r, g, b;
            elm_bg_color_get(this["eo"], &r, &g, &b);
            b = arg.to<int>();
            elm_bg_color_set(this["eo"], r,g,b);
            evas_object_show(this["eo"]);
        }


        getter green() {
            int val;
            elm_bg_color_get(this["eo"], NULL, NULL, &val);
            return v8::Integer::New(val);
        }

        setter green(arg) {
            int r, g, b;
            elm_bg_color_get(this["eo"], &r, &g, &b);
            g = arg.to<int>();
            elm_bg_color_set(this["eo"], r,g,b);
            evas_object_show(this["eo"]);
        }

        getter file() {
            const char *file, *group;
            elm_bg_file_get(this["eo"], &file, &group);
            return v8::String::New(file);
        }

        setter file(arg) {
            elm_bg_file_set(this["eo"], arg.to<String>(), NULL );
            evas_object_show(this["eo"]);
        }

    }

    class Box : Evas_Object {
        function Box(parent) {
            this["eo"] = elm_box_add(parent["eo"]);
            evas_object_size_hint_weight_set(this["eo"],EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
            evas_object_show(this["eo"]);
        }

        function add(child) {
            elm_box_pack_end(this["eo"], child["eo"]);
        }

        getter homogenous() {
            var eo = this["eo"];
            return v8::Boolean::New(elm_box_homogeneous_get(eo));
        }

        setter homogenous(arg) {
            var eo = this["eo"];
            elm_box_homogeneous_set(eo, arg.to<bool>());
        }

        getter horizontal() {
            var eo = this["eo"];
            return v8::Boolean::New(elm_box_horizontal_get(eo));
        }

        setter horizontal(arg) {
            var eo = this["eo"];
            elm_box_horizontal_set(eo, arg.to<bool>());
            printf("Horizontal is set\n");
        }

    }

    class Icon : Evas_Object {
        function Icon(parent, file) {
            printf("Created and showing icon %s\n", *(file.to<String>()));
            this["eo"] = elm_icon_add(parent["eo"]);
            elm_icon_file_set(this["eo"], file.to<String>(), NULL);
            evas_object_show(this["eo"]);
        }

        getter image() {
            const char *file, *group;
            elm_icon_file_get(this["eo"], &file, &group);
            return v8::String::New(file);
        }

        setter image(arg) {
            elm_icon_file_set(this["eo"], arg.to<String>(), NULL);
        }

    }

    class Button : Evas_Object {

        function Button(parent) {
            this["eo"] = elm_button_add(parent["eo"]);
            evas_object_show(this["eo"]);
        }

        setter onClick(arg) {
            printf("Setting callback function\n");
            this["clicked"] = arg;
            printf("Setting callback function\n");
            evas_object_smart_callback_add(this["eo"], "clicked", elmOnClicked, new Value(this));
        }

        getter onClick() {
            return this["clicked"];
        }

    }

}
