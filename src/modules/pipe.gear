license {
    // Copyright Joyent, Inc. and other Node contributors.
    //           (c) 2011 the gearbox-node project authors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
}

top {
    #include <UvCommon.h>
    #include <cstring>
}

module pipe {
    object exports {
        class Pipe {
            native uv_pipe_t handle;
            native bool unref;
            native size_t slabOffset;
            
            Pipe() {
                this.unref = false;
                int r = uv_pipe_init(uv_default_loop(), &this.handle, false);
                assert(r == 0); // How do we proxy this error up to javascript?
                // Suggestion: uv_pipe_init() returns void.
                
                //FIXME Will this even work? It would never be cleaned up.
                this.handle.data = new decltype(this)(this);
                Uv::Stream::updateWriteQueueSize(this);
            }
            Pipe(ipc) {
                this.unref = false;
                int r = uv_pipe_init(uv_default_loop(), &this.handle, ipc);
                assert(r == 0); // How do we proxy this error up to javascript?
                                // Suggestion: uv_pipe_init() returns void.
                
                //FIXME Will this even work? It would never be cleaned up.
                this.handle.data = new decltype(this)(this);
                Uv::Stream::updateWriteQueueSize(this);
            }
            
            unref()
                Uv::Handle::unref(this);
            close()
                Uv::Handle::close(this);
            
            open(fd)
                uv_pipe_open(&this.handle, fd);
            
            shutdown() {
                std::cerr << "TODO: Pipe shutdown" << std::endl;
                //TODO
            }
            
            readStart()
                Uv::Stream::readStart(this);
            readStop()
                Uv::Stream::readStop(this);
            
            write(buffer, offset, length, sendStream)
                return Uv::Stream::write(this, buffer, offset, length, sendStream);
            write(buffer, offset, length)
                return Uv::Stream::write(this, buffer, offset, length);
            write(buffer, offset)
                return Uv::Stream::write(this, buffer, offset);
            write(buffer)
                return Uv::Stream::write(this, buffer);
        }
    }
}
