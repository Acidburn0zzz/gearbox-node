header {    
#ifdef _WIN32
    #include <winsock.h>
#else
    #include <unistd.h>
    #include <fcntl.h>
    #include <netdb.h>
    #include <netinet/in.h>
    #include <sys/socket.h>
#endif
}

namespace Network {
    class Socket {
        var socket = -1;
        var family = -1;
        var type = -1;
        var isConnected = false;
        
        function Socket(family, type) {
            int sock = socket(family, type, 0);
            if(sock == -1)
                return Throw(Error("Unable to create socket"));
            
            this["socket"] = Internal(sock);
            this["family"] = Internal(family);
            this["type"] = Internal(type);
        }
        
        function connect(host, port) {
            struct hostent *host_s = gethostbyname(host.to<String>());
            if(!host_s)
                return Throw(Error("Unable to resolve host"));
                
            struct sockaddr_in server_addr;
            server_addr.sin_family = this["family"].to<uint32_t>();
            server_addr.sin_port = htons(port.to<uint32_t>());
            server_addr.sin_addr = *((struct in_addr *)host_s->h_addr);
            
            int result = connect(this["socket"], (struct sockaddr *)&server_addr, sizeof(struct sockaddr));
            if(result == -1)
                return Throw(Error("Unable to connect"));
            
            this["isConnected"] = Internal(true);
        }
        
        function receive() {
            int maxLen = 1024;//undefined == args[0] ? 1024 : Value(args[0]);
            char *buffer = new char [maxLen];
            int len = recv(this["socket"], buffer, maxLen, 0);
            if(len > 0) {
                String str(buffer, len);
                delete [] buffer;
                return str;
            }
            delete [] buffer;
        }
        
        function send(data) {
            send(this["socket"], data.to<String>(), data.length(), 0);
        }
        
        function close() {
#ifdef _WIN32
            closesocket(this["socket"]);
#else
            close(this["socket"]);
#endif
        }
        
        function block(blocking) {
#ifdef _WIN32
            u_long mode = blocking ? 1 : 0;
            ioctlsocket(this["socket"], FIONBIO, &mode);
#else
            int mode = fcntl(this["socket"], F_GETFL, 0);
            if(blocking)
                mode &= ~O_NONBLOCK;
            else
                mode |= O_NONBLOCK;
            fcntl(this["socket"], F_SETFL, mode);
#endif
        }
        
        /** Constants */
        
        /** Socket families */
        static var INET = AF_INET;
        /*static var INET6 = AF_INET6;*/
        static var UNIX = AF_UNIX;
        
        /** Socket types */
        static var TCP = SOCK_STREAM;
        static var UDP = SOCK_DGRAM;
    }
}
